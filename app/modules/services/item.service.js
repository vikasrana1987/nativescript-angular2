"use strict";
var core_1 = require("@angular/core");
var Toast = require("nativescript-toast");
var ItemService = (function () {
    function ItemService() {
        this.items = new Array({ id: 1, name: "Ter Stegen", description: "Goalkeeper", image: "vegas.jpg", isFavorite: false }, { id: 3, name: "Piqué", description: "Defender", image: "batman.jpg", isFavorite: true }, { id: 4, name: "I. Rakitic", description: "Midfielder", image: "vegas.jpg", isFavorite: false }, { id: 5, name: "Sergio", description: "Midfielder", image: "plane.jpg", isFavorite: true }, { id: 6, name: "Denis Suárez", description: "Midfielder", image: "vegas.jpg", isFavorite: false }, { id: 7, name: "Arda", description: "Midfielder", image: "batman.jpg", isFavorite: true }, { id: 8, name: "A. Iniesta", description: "Midfielder", image: "plane.jpg", isFavorite: false }, { id: 9, name: "Suárez", description: "Forward", image: "vegas.jpg", isFavorite: true }, { id: 10, name: "Messi", description: "Forward", image: "batman.jpg", isFavorite: false }, { id: 11, name: "Neymar", description: "Forward", image: "vegas.jpg", isFavorite: true }, { id: 12, name: "Rafinha", description: "Midfielder", image: "batman.jpg", isFavorite: true }, { id: 13, name: "Cillessen", description: "Goalkeeper", image: "plane.jpg", isFavorite: false }, { id: 14, name: "Mascherano", description: "Defender", image: "batman.jpg", isFavorite: true }, { id: 15, name: "Paco Alcácer", description: "Forward", image: "plane.jpg", isFavorite: false });
    }
    ItemService.prototype.getItems = function () {
        return this.items;
    };
    ItemService.prototype.getItem = function (id) {
        return this.items.filter(function (item) { return item.id === id; })[0];
    };
    ItemService.prototype.showToast = function (text) {
        var toast = Toast.makeText(text);
        toast.show();
    };
    return ItemService;
}());
ItemService = __decorate([
    core_1.Injectable()
], ItemService);
exports.ItemService = ItemService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMkM7QUFDM0MsMENBQTRDO0FBSzVDLElBQWEsV0FBVztJQUR4QjtRQUVZLFVBQUssR0FBRyxJQUFJLEtBQUssQ0FDckIsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsRUFDN0YsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFDdkYsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFDOUYsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFDekYsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFDaEcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFDeEYsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFDOUYsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFDdEYsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFDeEYsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFDdkYsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFDNUYsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFDOUYsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFDN0YsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FDakcsQ0FBQztJQWNOLENBQUM7SUFaRyw4QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELDZCQUFPLEdBQVAsVUFBUSxFQUFVO1FBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQWQsQ0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELCtCQUFTLEdBQVQsVUFBVSxJQUFZO1FBQ2xCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFDTCxrQkFBQztBQUFELENBQUMsQUE5QkQsSUE4QkM7QUE5QlksV0FBVztJQUR2QixpQkFBVSxFQUFFO0dBQ0EsV0FBVyxDQThCdkI7QUE5Qlksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCAqIGFzIFRvYXN0IGZyb20gJ25hdGl2ZXNjcmlwdC10b2FzdCc7XG5cbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi8uLi9tb2RlbHMvaXRlbVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSXRlbVNlcnZpY2Uge1xuICAgIHByaXZhdGUgaXRlbXMgPSBuZXcgQXJyYXk8SXRlbT4oXG4gICAgICAgIHsgaWQ6IDEsIG5hbWU6IFwiVGVyIFN0ZWdlblwiLCBkZXNjcmlwdGlvbjogXCJHb2Fsa2VlcGVyXCIsIGltYWdlOlwidmVnYXMuanBnXCIsIGlzRmF2b3JpdGU6IGZhbHNlfSxcbiAgICAgICAgeyBpZDogMywgbmFtZTogXCJQaXF1w6lcIiwgZGVzY3JpcHRpb246IFwiRGVmZW5kZXJcIiwgaW1hZ2U6XCJiYXRtYW4uanBnXCIsIGlzRmF2b3JpdGU6IHRydWUgfSxcbiAgICAgICAgeyBpZDogNCwgbmFtZTogXCJJLiBSYWtpdGljXCIsIGRlc2NyaXB0aW9uOiBcIk1pZGZpZWxkZXJcIiwgaW1hZ2U6XCJ2ZWdhcy5qcGdcIiwgaXNGYXZvcml0ZTogZmFsc2UgfSxcbiAgICAgICAgeyBpZDogNSwgbmFtZTogXCJTZXJnaW9cIiwgZGVzY3JpcHRpb246IFwiTWlkZmllbGRlclwiLCBpbWFnZTpcInBsYW5lLmpwZ1wiLCBpc0Zhdm9yaXRlOiB0cnVlIH0sXG4gICAgICAgIHsgaWQ6IDYsIG5hbWU6IFwiRGVuaXMgU3XDoXJlelwiLCBkZXNjcmlwdGlvbjogXCJNaWRmaWVsZGVyXCIsIGltYWdlOlwidmVnYXMuanBnXCIsIGlzRmF2b3JpdGU6IGZhbHNlIH0sXG4gICAgICAgIHsgaWQ6IDcsIG5hbWU6IFwiQXJkYVwiLCBkZXNjcmlwdGlvbjogXCJNaWRmaWVsZGVyXCIsIGltYWdlOlwiYmF0bWFuLmpwZ1wiLCBpc0Zhdm9yaXRlOiB0cnVlIH0sXG4gICAgICAgIHsgaWQ6IDgsIG5hbWU6IFwiQS4gSW5pZXN0YVwiLCBkZXNjcmlwdGlvbjogXCJNaWRmaWVsZGVyXCIsIGltYWdlOlwicGxhbmUuanBnXCIsIGlzRmF2b3JpdGU6IGZhbHNlIH0sXG4gICAgICAgIHsgaWQ6IDksIG5hbWU6IFwiU3XDoXJlelwiLCBkZXNjcmlwdGlvbjogXCJGb3J3YXJkXCIsIGltYWdlOlwidmVnYXMuanBnXCIsIGlzRmF2b3JpdGU6IHRydWUgfSxcbiAgICAgICAgeyBpZDogMTAsIG5hbWU6IFwiTWVzc2lcIiwgZGVzY3JpcHRpb246IFwiRm9yd2FyZFwiLCBpbWFnZTpcImJhdG1hbi5qcGdcIiwgaXNGYXZvcml0ZTogZmFsc2UgfSxcbiAgICAgICAgeyBpZDogMTEsIG5hbWU6IFwiTmV5bWFyXCIsIGRlc2NyaXB0aW9uOiBcIkZvcndhcmRcIiwgaW1hZ2U6XCJ2ZWdhcy5qcGdcIiwgaXNGYXZvcml0ZTogdHJ1ZSB9LFxuICAgICAgICB7IGlkOiAxMiwgbmFtZTogXCJSYWZpbmhhXCIsIGRlc2NyaXB0aW9uOiBcIk1pZGZpZWxkZXJcIiwgaW1hZ2U6XCJiYXRtYW4uanBnXCIsIGlzRmF2b3JpdGU6IHRydWUgfSxcbiAgICAgICAgeyBpZDogMTMsIG5hbWU6IFwiQ2lsbGVzc2VuXCIsIGRlc2NyaXB0aW9uOiBcIkdvYWxrZWVwZXJcIiwgaW1hZ2U6XCJwbGFuZS5qcGdcIiwgaXNGYXZvcml0ZTogZmFsc2UgfSxcbiAgICAgICAgeyBpZDogMTQsIG5hbWU6IFwiTWFzY2hlcmFub1wiLCBkZXNjcmlwdGlvbjogXCJEZWZlbmRlclwiLCBpbWFnZTpcImJhdG1hbi5qcGdcIiwgaXNGYXZvcml0ZTogdHJ1ZSB9LFxuICAgICAgICB7IGlkOiAxNSwgbmFtZTogXCJQYWNvIEFsY8OhY2VyXCIsIGRlc2NyaXB0aW9uOiBcIkZvcndhcmRcIiwgaW1hZ2U6XCJwbGFuZS5qcGdcIiwgaXNGYXZvcml0ZTogZmFsc2UgfSxcbiAgICApO1xuXG4gICAgZ2V0SXRlbXMoKTogSXRlbVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXM7XG4gICAgfVxuXG4gICAgZ2V0SXRlbShpZDogbnVtYmVyKTogSXRlbSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgPT09IGlkKVswXTtcbiAgICB9XG5cbiAgICBzaG93VG9hc3QodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGxldCB0b2FzdCA9IFRvYXN0Lm1ha2VUZXh0KHRleHQpO1xuICAgICAgICB0b2FzdC5zaG93KCk7XG4gICAgfVxufVxuIl19